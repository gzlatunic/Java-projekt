
import java.awt.Font;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.sql.*;
import java.util.Scanner;
import javax.swing.JOptionPane;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.logging.Level;
import java.util.logging.Logger;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gabrijela
 */
public class DrugaForma extends javax.swing.JFrame {

    /**
     * Creates new form DrugaForma
     */
    public DrugaForma() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unos elemenata matrice");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.dispose(); //da se samo ova forma zatvori
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrugaForma().setVisible(true);
            }
        });
    }
    JTextField file_save_path = new JTextField();
    Map<String, JTextField> mapa;
    Map<String, JTextField> mapa_jednakost;
    
    public void my_update(int dimenzija){
        int x = 10;
        int y = 10;
        mapa = new HashMap<>();
        mapa_jednakost = new HashMap<>();
        for(int i = 0; i < dimenzija; i++){
            x = 10;
            for(int j = 0; j < dimenzija + 1; j++){
                if(j < dimenzija){
                    String var = "tekst" + i + j;
                    JTextField tekstic = new JTextField();
                    tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                    tekstic.setName(var);
                    tekstic.addActionListener(new FieldListener());
                    mapa.put(var, tekstic);
                    tekstic.setBounds(x, y, 30, 30);
                    tekstic.setVisible(true);
                    this.add(tekstic);

                    x += 40;
                }
                else
                {   x += 10;
                String var = "tekst" + i;
                JTextField tekstic = new JTextField();
                tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                tekstic.setName(var);
                tekstic.addActionListener(new FieldListener());
                mapa_jednakost.put(var, tekstic);
                tekstic.setBounds(x, y, 30, 30);
                tekstic.setVisible(true);
                this.add(tekstic);
                }
            }
            y += 40;
        }
        x = 0;
        JButton stvoriMatricu = new JButton("Stvorite matricu");
        stvoriMatricu.setBounds(x + 10, y +10, 150, 50);
        this.add(stvoriMatricu);
        stvoriMatricu.addActionListener(e -> {
            try {
                riješi_sustav(dimenzija);
            } catch (IOException ex) {
                Logger.getLogger(DrugaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        //PROVJERI ŠTO JE OVO
        
        file_save_path.setName("file_save_path");
        file_save_path.setBounds(x + 10, y +60, 150, 50);
        file_save_path.setVisible(true);
        this.add(file_save_path);
        JButton spremiMatricu = new JButton("Spremi matricu");
        spremiMatricu.setBounds(x + 10, y +110, 150, 50);
        this.add(spremiMatricu);
        spremiMatricu.addActionListener(e -> spremi());
        
        
        //triba povezat botun sa spremanjen u bazu
    }
    
    //Vrati se na ovo pa u to ukumponiraj da radi - Gabi
    public void my_update1(double[][] matrica, String matrix_path){
                
        int x = 10;
        int y = 10;
        
        mapa = new HashMap<>();
         for(int i = 0; i < matrica.length; i++){ //msn da ce ode ic minus 1
            x = 10;
            for(int j = 0; j < matrica.length + 1; j++){
               if(j < matrica.length){
                     String var = "tekst" + i + j;
                    JTextField tekstic = new JTextField();
                    tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                    tekstic.setName(var);
                    tekstic.setText(Double.toString(matrica[i][j]));
                    tekstic.addActionListener(new FieldListener());
                    mapa.put(var, tekstic);
                    tekstic.setBounds(x, y, 40, 40);
                    tekstic.setVisible(true);
                    this.add(tekstic);

                    x += 40;
                }
                else
                {   x += 10;
                    String var = "tekst" + i;
                    JTextField tekstic = new JTextField();
                    tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                    tekstic.setName(var);
                    tekstic.setText(Double.toString(matrica[i][j]));
                    tekstic.addActionListener(new FieldListener());
                    mapa.put(var, tekstic);
                    tekstic.setBounds(x, y, 30, 30);
                    tekstic.setVisible(true);
                    this.add(tekstic);
                }
            }
            y += 40;
        }
        x = 0;
        JButton stvoriMatricu = new JButton("Stvorite matricu"); //nzm triba li ovo ostat ode kad učitamo matricu
        
        //zelim da se ne ugasi ako zatvorim ovaj prozor
        
        stvoriMatricu.setBounds(x + 10, y +10, 150, 50);
        this.add(stvoriMatricu);
        JButton rjesenje = new JButton("Pogledaj rješnje!");
        //ode provjerit u bazi jel rješeno do kraja pa to javit u message dialogu
        rjesenje.setBounds(x + 10, y + 70, 150, 50); //ov prilagodit
        this.add(rjesenje);
        rjesenje.addActionListener(e -> imaLiRjesenje(matrix_path, chosen_path));
        stvoriMatricu.addActionListener(e -> {
            try {
                riješi_sustav(matrica.length);
            } catch (IOException ex) {
                Logger.getLogger(DrugaForma.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        
        //stvoriMatricu.addActionListener(e -> mat(dimenzija));
    }
    
 
    public void riješi_sustav(int dim) throws IOException{
        Matrica vrati_matricu = new Matrica(dim);
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                String ime = "tekst" + i + j;
                JTextField temp = mapa.get(ime);
                vrati_matricu.matrica[i][j] = Double.parseDouble((String.valueOf(temp.getText())));
            }
        }
        double[] b = new double[dim];
        for(int i = 0; i < dim; i++){
            String ime = "tekst" + i;
            JTextField temp = mapa_jednakost.get(ime);
            b[i] = Double.parseDouble((String.valueOf(temp.getText())));
        }
        DvijeMatrice dvije = luFaktorizacija(vrati_matricu, dim);
        
        Matrica L = dvije.A;
        
        Matrica U = dvije.B;
        
        Sustav obj = new Sustav();
        double[] y = obj.riješiJednadžbu(L, b);
        double[] rj = obj.riješiJednadžbu(U, y);
        
        System.out.print("Rješenje sustava:");
        for(int i = 0; i < dim; i++){
            System.out.print(rj[i] + "   ");
        }
        
        //upisivanje matrice u datoteku i spremanje u bazu
        try {
       
            File file = new File(chosen_path);
            FileWriter fw = new FileWriter(file);
            BufferedWriter writer = new BufferedWriter(fw);


            for (int i = 0; i < dim; i++) {
                for (int j = 0; j < dim + 1; j++) {
                    //if( i < dim )
                    //{               
                        if( j < dim)
                        {
                            String ime = "tekst" + i + j;
                            JTextField temp = mapa.get(ime);
                            Double a = Double.parseDouble((String.valueOf(temp.getText())));
                            writer.write(a+ " ");
                            //System.out.println(a+" ");
                        }
                        else
                        {
                            String ime = "tekst" + i;
                            JTextField temp = mapa_jednakost.get(ime);
                            Double a = Double.parseDouble((String.valueOf(temp.getText())));
                            writer.write(a+ " ");
                            //System.out.println(a+" ");
                        }
                        

                    //}
                    
                }
                //System.out.println("\n");
                writer.newLine();
            }
            writer.flush();
            writer.close();
            

        } catch (Exception e) {
            System.out.println("Error");
            System.out.println(chosen_path);
        }
        //upisivanje rješenja u datoteku
        try {
       
            File file = new File(solution_path);
            FileWriter fw = new FileWriter(file);
            BufferedWriter writer = new BufferedWriter(fw);


            for (int i = 0; i < dim ; i++) {
                writer.write(rj[i]+ " ");
            }
            writer.flush();
            writer.close();
            

        } catch (Exception e) {
            System.out.println("Error");
            System.out.println(chosen_path);
        }
        imaLiRjesenje(chosen_path, solution_path);
    }
    public DvijeMatrice luFaktorizacija(Matrica matr, int dim){
        // Ovdje treba popraviti dio sa dijeljenjem jer java zaokružuje prema nuli
        // Pa se rješenja ne slažu najbolje
        Matrica L = new Matrica(dim);
        Matrica U = new Matrica(dim);
        
        for(int i = 0; i < dim; i++){
            for(int k = i; k < dim; k++){
                double sum = 0;
                for(int j = 0; j < i; j++){
                    sum += (L.matrica[i][j] * U.matrica[j][k]);
                }
                U.matrica[i][k] = matr.matrica[i][k] - sum;
            }
            for(int k = i; k < dim; k++){
                if (i == k)
                    L.matrica[i][i] = 1;
                else {
                    int sum = 0;
                    for(int j = 0; j < i; j++){
                        sum += L.matrica[k][j] * U.matrica[j][i];
                    }
                    L.matrica[k][i] = (matr.matrica[k][i] - sum) / U.matrica[i][i];
                }
            }
        }
        
        DvijeMatrice dvije = new DvijeMatrice(L, U);
        return dvije;
    }
   
    String chosen_path;
    String solution_path;
    public void spremi()
    {
        File dir = null;
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(null); //odabiremo direkotorij za spremanje matrice
        
        if( returnVal == JFileChooser.APPROVE_OPTION){
            dir = fc.getSelectedFile();
        }
        solution_path = dir + "\\" + "RJ_" +  file_save_path.getText();
        chosen_path = dir + "\\" + file_save_path.getText();
        System.out.println(chosen_path);
        
        
        
        //radimo file
        // ime pročitat iz 
        //File file = new File(dir, )
    }

    public void imaLiRjesenje( String putanjaMatrice, String putanjaRjesenja) {
        //ako je matrica tek stvorena putanjaRjesenja=""
        Connection c = null;
        Statement stmt = null;
        
        /*try {
           Class.forName("org.sqlite.JDBC");
           c = DriverManager.getConnection("jdbc:sqlite:jprojekt.db");
           System.out.println("Opened database successfully");
           
           stmt = c.createStatement();
           String sql = "CREATE TABLE PROJECT_DATA" +
                          "(ID INTEGER PRIMARY KEY  AUTOINCREMENT NOT NULL ," +
                          " PATH_MATRIX           TEXT    NOT NULL, " + 
                          " PATH_SOLUTION          TEXT, " + 
                          " SOLVED        INT NOT NULL," + 
                          " LU  TEXT," +
                          " LY  TEXT)"; 
           stmt.executeUpdate(sql);
           
           stmt.close();
           c.close();
        } catch ( Exception e ) {
           System.err.println( e.getClass().getName() + ": " + e.getMessage() );
           System.exit(0);
        }
        System.out.println("Table created successfully");*/

        try {
           Class.forName("org.sqlite.JDBC");
           c = DriverManager.getConnection("jdbc:sqlite:jprojekt.db");
           c.setAutoCommit(false);
           System.out.println("Opened database successfully");
           int i = 0;
           stmt = c.createStatement();
           //String sql =String.format( "SELECT SOLVED FROM PROJECT WHERE MATRIX_PATH= ? ",putanjaMatrice);
           
           /*PreparedStatement pst;
            String sql ="SELECT * FROM patient.patient P WHERE P._ID = ?";
            pst = cn.prepareStatement(sql);
            pst.setInt(1, 1);*/
           
           PreparedStatement pst;
           String sql = "SELECT PATH_MATRIX, PATH_SOLUTION FROM PROJECT_DATA WHERE PATH_MATRIX= ?";
           pst = c.prepareStatement(sql);
           pst.setString(1, putanjaMatrice);

           ResultSet rs = pst.executeQuery();
           //System.out.println("Ovo je rs.next:" + rs.next());
           String rj;
           while ( rs.next() ) {
                rj = rs.getString("PATH_SOLUTION");
                //JOptionPane.showMessageDialog(rootPane, "rj = " + rj );//pročitat iz datoteke rješenje, ovo će ispisat samo put do rj
                System.out.println("ovo je rjesenje");
                //System.exit(0);
                i = 1;
                 try {  
                    String cijelaDatoteka = "", linija = "";
                    File input = new File( rj );
                    double a;
                    Scanner myReader = new Scanner(input);        

                    String data = myReader.nextLine();
                    JOptionPane.showMessageDialog(rootPane, "rj = " + data );
                    myReader.close();
                }  
                catch (FileNotFoundException e) {
                //JOptionPane.showMessageDialog(rootPane, "U datoteci se ne nalazi matrica!");
                System.out.println("An error occurred.");
                e.printStackTrace();


            }
           
           
           }
           
           
           if (i == 0)
           {
                JOptionPane.showMessageDialog(rootPane, "Matrica još nije u bazi podataka, dodajem!!" );
   
                String dodaj = "INSERT INTO PROJECT_DATA(PATH_MATRIX, PATH_SOLUTION, SOLVED, LU, LY) VALUES(?,?,?,?,?)";
                //String dodaj = "INSERT INTO PROJECT_DB(PATH_MATRIX) VALUES(?)";
                System.out.println( "dodajem"  );
                PreparedStatement pstmt = c . prepareStatement ( dodaj ) ;
                pstmt.setString (1 , putanjaMatrice ) ;
                pstmt.setString (2 , putanjaRjesenja ) ;
                pstmt.setInt(3, 1);
                System.out.println( "dosa do ode"  );
                pstmt.setString(4, "");
                pstmt.setString(5, "");

                
                pstmt.executeUpdate () ;
               }

               //ode stavit i za mogućnosti da ima neki dio rješenja! 

               rs.close();
               stmt.close();
               c.commit();
               c.close();

            } catch ( Exception e ) {
               System.out.println("Ovdje je greška");
               System.err.println( e.getClass().getName() + ": " + e.getMessage() );
               System.exit(0);
               
            }
            System.out.println("Records created successfully");
            ispisSvega();
            System.out.println("kraj");
    }
    
    public void ispisSvega()
    {
        Connection c = null;
        Statement stmt = null;
        try {
               Class.forName("org.sqlite.JDBC");
               c = DriverManager.getConnection("jdbc:sqlite:jprojekt.db");
               c.setAutoCommit(false);
               System.out.println("Opened database successfully");

               stmt = c.createStatement();
               String sql = "SELECT * FROM PROJECT_DATA "; 
               ResultSet rs = stmt.executeQuery(sql);
               while ( rs.next() ) {
                  int id = rs.getInt("id");
                      String  put = rs.getString("PATH_MATRIX");
                      String  rj = rs.getString("PATH_SOLUTION");
                      int solved = rs.getInt("SOLVED");
                      String lu = rs.getString("LU");
                      String ly = rs.getString("LY");

                      System.out.println( "ID = " + id );
                      System.out.println( "put = " + put );
                      System.out.println( "rj = " + rj );
                      System.out.println( "solved = " + solved );
                      System.out.println( "lu = " + lu );
                      System.out.println( "ly = " + ly );
                      System.out.println();

              }
              rs.close();

               stmt.close();
               c.commit();
               c.close();
            } catch ( Exception e ) {
               System.err.println( e.getClass().getName() + ": " + e.getMessage() );
               System.exit(0);
            }
    }

   

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


