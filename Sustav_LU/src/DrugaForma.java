
import java.awt.Font;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import java.sql.*;
import java.util.Scanner;
import javax.swing.JOptionPane;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gabrijela
 */
public class DrugaForma extends javax.swing.JFrame {

    /**
     * Creates new form DrugaForma
     */
    public DrugaForma() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unos elemenata matrice");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.dispose(); //da se samo ova forma zatvori
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_formWindowClosed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrugaForma().setVisible(true);
            }
        });
    }
    
    Map<String, JTextField> mapa;
    public void my_update(int dimenzija){
        int x = 10;
        int y = 10;
        
        mapa = new HashMap<>();
        for(int i = 0; i < dimenzija; i++){
            x = 10;
            for(int j = 0; j < dimenzija; j++){
                String var = "tekst" + i + j;
                JTextField tekstic = new JTextField();
                tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                tekstic.setName(var);
                tekstic.addActionListener(new FieldListener());
                mapa.put(var, tekstic);
                tekstic.setBounds(x, y, 30, 30);
                tekstic.setVisible(true);
                this.add(tekstic);
                
                x += 40;
            }
            y += 40;
        }
        x = 0;
        JButton stvoriMatricu = new JButton("Stvorite matricu");
        stvoriMatricu.setBounds(x + 10, y +10, 150, 50);
        this.add(stvoriMatricu);
        stvoriMatricu.addActionListener(e -> mat(dimenzija));
        
        JButton spremiMatricu = new JButton("Spremi matricu");
        spremiMatricu.setBounds(x + 10, y +60, 150, 50);
        this.add(spremiMatricu);
        spremiMatricu.addActionListener(e -> spremi());
        
        
        //triba povezat botun sa spremanjen u bazu
    }
    public void my_update1(double[][] matrica, String matrix_path){
                
        int x = 10;
        int y = 10;
        
        mapa = new HashMap<>();
        for(int i = 0; i < matrica.length; i++){
            x = 10;
            for(int j = 0; j < matrica.length; j++){
                String var = "tekst" + i + j;
                JTextField tekstic = new JTextField();
                tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                tekstic.setName(var);
                tekstic.setText(Double.toString(matrica[i][j]));
                tekstic.addActionListener(new FieldListener());
                mapa.put(var, tekstic);
                tekstic.setBounds(x, y, 40, 40);
                tekstic.setVisible(true);
                this.add(tekstic);
                
                x += 40;
            }
            y += 40;
        }
        x = 0;
        JButton stvoriMatricu = new JButton("Stvorite matricu"); //nzm triba li ovo ostat ode kad učitamo matricu
        
        //zelim da se ne ugasi ako zatvorim ovaj prozor
        
        stvoriMatricu.setBounds(x + 10, y +10, 150, 50);
        this.add(stvoriMatricu);
        
        JButton rjesenje = new JButton("Pogledaj rješnje!");
        //ode provjerit u bazi jel rješeno do kraja pa to javit u message dialogu
        rjesenje.setBounds(x + 10, y + 70, 150, 50); //ov prilagodit
        this.add(rjesenje);
        rjesenje.addActionListener(e -> imaLiRjesenje(matrix_path));
        
        //stvoriMatricu.addActionListener(e -> mat(dimenzija));
    }
 
    public void mat(int dim){
        int[][] matrica = new int[dim][dim];
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                String ime = "tekst" + i + j;
                JTextField temp = mapa.get(ime);
                matrica[i][j] = Integer.parseInt(String.valueOf(temp.getText()));
            }
        }
        DvijeMatrice dvije = luFaktorizacija(matrica, dim);
        double[][] A = dvije.A;
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                System.out.print(A[i][j] + "  ");
            }
            System.out.println();
        }
        
        double[][] B = dvije.B;
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                System.out.print(B[i][j] + "  ");
            }
            System.out.println();
        }
    }
    public DvijeMatrice luFaktorizacija(int[][] matrica, int dim){
        // Ovdje treba popraviti dio sa dijeljenjem jer java zaokružuje prema nuli
        // Pa se rješenja ne slažu najbolje
        double[][] L = new double[dim][dim];
        double[][] U = new double[dim][dim];
        
        for(int i = 0; i < dim; i++){
            for(int k = i; k < dim; k++){
                int sum = 0;
                for(int j = 0; j < i; j++){
                    sum += (L[i][j] * U[j][k]);
                }
                U[i][k] = matrica[i][k] - sum;
            }
            for(int k = i; k < dim; k++){
                if (i == k)
                    L[i][i] = 1;
                else {
                    int sum = 0;
                    for(int j = 0; j < i; j++){
                        sum += (L[k][j] * U[j][i]);
                    }
                    L[k][i] = (matrica[k][i] - sum) / U[i][i];
                }
            }
        }
        
        DvijeMatrice dvije = new DvijeMatrice(L, U);
        return dvije;
    }
    /*
    public double[] luFaktorizacija(int[][] matrica,int[] b, int dimenzija){
        //int[][] U = new int[dimenzija][dimenzija];
        //int[][]L = new int[dimenzija][dimenzija];
        
        double[][] lu = new double[dimenzija][dimenzija];
        int sum = 0;
        
        for(int i = 0; i < dimenzija; i++){
            for(int j = i; j < dimenzija; j++){
                sum = 0;
                for(int k = 0; k < i; k++){
                    sum += lu[i][k] * lu[k][j];
                }
                lu[i][j] = matrica[i][j] - sum;
            }
            for(int j = i + 1; j < dimenzija; j++){
                sum = 0;
                for(int k = 0; k < i; k++){
                    sum += lu[j][k] - lu[k][i];
                }
                lu[j][i] = (double)(1 / (lu[i][i])) * (matrica[j][i] - sum);
            }
        }
        
        //Rješenje Ly = b
        double[] y = new double[dimenzija];
        for(int i = 0; i < dimenzija; i++){
            sum = 0;
            for(int k = 0; k < i; k++){
                sum += lu[i][k] * y[k];
            }
            y[i] = b[i] - sum;  
        }
        
        double[] x = new double[dimenzija];
        for(int i = dimenzija - 1; i >= 0; i--){
            sum = 0;
            for(int k = i + 1; k < dimenzija; k++){
                sum += lu[i][k] * x[k];
            }
            x[i] = (double)(1 / (lu[i][i])) * (y[i] - sum);
        }
        return x;
    }
*/
    public void spremi()
    {
        File dir = null;
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int returnVal = fc.showOpenDialog(null); //odabiremo direkotorij za spremanje matrice
        
        if( returnVal == JFileChooser.APPROVE_OPTION){
            dir = fc.getSelectedFile();
        }
        
        //radimo file
        // ime pročitat iz 
        //File file = new File(dir, )
    }

    public void imaLiRjesenje( String putanjaMatrice) {
        
        Connection c = null;
        Statement stmt = null;
      
        try {
           Class.forName("org.sqlite.JDBC");
           c = DriverManager.getConnection("jdbc:sqlite:jprojekt.db");
           c.setAutoCommit(false);
           System.out.println("Opened database successfully");
           int i = 0;
           stmt = c.createStatement();
           //String sql =String.format( "SELECT SOLVED FROM PROJECT WHERE MATRIX_PATH= ? ",putanjaMatrice);
           String sql = String.format("SELECT SOLUTION_PATH FROM PROJECT WHERE MATRIX_PATH= ?", putanjaMatrice);

           ResultSet rs = stmt.executeQuery(sql);
           while ( rs.next() ) {
                String  rj = rs.getString("SOLUTION_PATH");
                JOptionPane.showMessageDialog(rootPane, "rj = " + rj );//pročitat iz datoteke rješenje, ovo će ispisat samo put do rj
                i = 1;
            }
           if (i == 0)
               JOptionPane.showMessageDialog(rootPane, "Matrica još nije u bazi podataka!" );
           
           //ode stavit i za mogućnosti da ima neki dio rješenja! 
           
           rs.close();
           stmt.close();
           c.commit();
           c.close();
           
        } catch ( Exception e ) {
           System.err.println( e.getClass().getName() + ": " + e.getMessage() );
           System.exit(0);
        }
        System.out.println("Records created successfully");
    }
    

}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


