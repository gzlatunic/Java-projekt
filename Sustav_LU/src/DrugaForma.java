
import java.awt.Font;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JTextField;



/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author gabrijela
 */
public class DrugaForma extends javax.swing.JFrame {

    /**
     * Creates new form DrugaForma
     */
    public DrugaForma() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Unos elemenata matrice");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DrugaForma.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DrugaForma().setVisible(true);
            }
        });
    }
    
    Map<String, JTextField> mapa;
    public void my_update(int dimenzija){
        int x = 10;
        int y = 10;
        
        mapa = new HashMap<>();
        for(int i = 0; i < dimenzija; i++){
            x = 10;
            for(int j = 0; j < dimenzija; j++){
                String var = "tekst" + i + j;
                JTextField tekstic = new JTextField();
                tekstic.setFont(new Font("Consolas", Font.PLAIN, 12));
                tekstic.setName(var);
                tekstic.addActionListener(new FieldListener());
                mapa.put(var, tekstic);
                tekstic.setBounds(x, y, 30, 30);
                tekstic.setVisible(true);
                this.add(tekstic);
                
                x += 40;
            }
            y += 40;
        }
        x = 0;
        JButton stvoriMatricu = new JButton("Stvorite matricu");
        stvoriMatricu.setBounds(x + 10, y +10, 150, 50);
        this.add(stvoriMatricu);
        stvoriMatricu.addActionListener(e -> mat(dimenzija));
        
    }
 
    public void mat(int dim){
        int[][] matrica = new int[dim][dim];
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                String ime = "tekst" + i + j;
                JTextField temp = mapa.get(ime);
                matrica[i][j] = Integer.parseInt(String.valueOf(temp.getText()));
            }
        }
        DvijeMatrice dvije = luFaktorizacija(matrica, dim);
        double[][] A = dvije.A;
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                System.out.print(A[i][j] + "  ");
            }
            System.out.println();
        }
        
        double[][] B = dvije.B;
        for(int i = 0; i < dim; i++){
            for(int j = 0; j < dim; j++){
                System.out.print(B[i][j] + "  ");
            }
            System.out.println();
        }
    }
    public DvijeMatrice luFaktorizacija(int[][] matrica, int dim){
        // Ovdje treba popraviti dio sa dijeljenjem jer java zaokružuje prema nuli
        // Pa se rješenja ne slažu najbolje
        double[][] L = new double[dim][dim];
        double[][] U = new double[dim][dim];
        
        for(int i = 0; i < dim; i++){
            for(int k = i; k < dim; k++){
                int sum = 0;
                for(int j = 0; j < i; j++){
                    sum += (L[i][j] * U[j][k]);
                }
                U[i][k] = matrica[i][k] - sum;
            }
            for(int k = i; k < dim; k++){
                if (i == k)
                    L[i][i] = 1;
                else {
                    int sum = 0;
                    for(int j = 0; j < i; j++){
                        sum += (L[k][j] * U[j][i]);
                    }
                    L[k][i] = (matrica[k][i] - sum) / U[i][i];
                }
            }
        }
        
        DvijeMatrice dvije = new DvijeMatrice(L, U);
        return dvije;
    }
    /*
    public double[] luFaktorizacija(int[][] matrica,int[] b, int dimenzija){
        //int[][] U = new int[dimenzija][dimenzija];
        //int[][]L = new int[dimenzija][dimenzija];
        
        double[][] lu = new double[dimenzija][dimenzija];
        int sum = 0;
        
        for(int i = 0; i < dimenzija; i++){
            for(int j = i; j < dimenzija; j++){
                sum = 0;
                for(int k = 0; k < i; k++){
                    sum += lu[i][k] * lu[k][j];
                }
                lu[i][j] = matrica[i][j] - sum;
            }
            for(int j = i + 1; j < dimenzija; j++){
                sum = 0;
                for(int k = 0; k < i; k++){
                    sum += lu[j][k] - lu[k][i];
                }
                lu[j][i] = (double)(1 / (lu[i][i])) * (matrica[j][i] - sum);
            }
        }
        
        //Rješenje Ly = b
        double[] y = new double[dimenzija];
        for(int i = 0; i < dimenzija; i++){
            sum = 0;
            for(int k = 0; k < i; k++){
                sum += lu[i][k] * y[k];
            }
            y[i] = b[i] - sum;  
        }
        
        double[] x = new double[dimenzija];
        for(int i = dimenzija - 1; i >= 0; i--){
            sum = 0;
            for(int k = i + 1; k < dimenzija; k++){
                sum += lu[i][k] * x[k];
            }
            x[i] = (double)(1 / (lu[i][i])) * (y[i] - sum);
        }
        return x;
    }
*/
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables


